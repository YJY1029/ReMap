`timescale 1ns / 1ns

`include "defines.v"

module remap( 
    input wire [`M1_LENGTH - 1 : 0] m1, 

    output wire [`M2_LENGTH - 1 : 0] m2
); 

    // generate nodes and constants
    wire [`M1_LENGTH - 1 : 0] node [`NODE_NUM - 1 : 0]; 
    wire [`M1_LENGTH - 1 : 0] intcpt [`PIECE_NUM - 1 : 0]; 

    //generated by ../Checked/makeverilog.m 

    assign node[0] = 28'h0000000; 
    assign intcpt[0] = 28'h0000000; 

    assign node[1] = 28'h00CCCCC; 
    assign intcpt[1] = 28'h00CBFF4; 

    assign node[2] = 28'h2000000; 
    assign intcpt[2] = 28'h092FFFA; 

    assign node[3] = 28'h2100000; 
    assign intcpt[3] = 28'h0831A3E; 

    assign node[4] = 28'h4000000; 
    assign intcpt[4] = 28'h1234656; 

    assign node[5] = 28'h6000000; 
    assign intcpt[5] = 28'h1E0C862; 

    assign node[6] = 28'h8000000; 
    
    // compare 
    wire [`PIECE_NUM - 1 : 0] piece; 
    wire [`M1_LENGTH - 1 : 0] const; 

    genvar i; 
    generate 
        for (i = 0; i < `PIECE_NUM; i = i + 1) begin: find_piece
            assign piece[i] = ((node[i] < m1) && (m1 <= node[i+1])); 
        end
    endgenerate 

    assign const = 
        ({`M1_LENGTH{piece[0]}} & intcpt[0]) | 
        ({`M1_LENGTH{piece[1]}} & intcpt[1]) | 
        ({`M1_LENGTH{piece[2]}} & intcpt[2]) | 
        ({`M1_LENGTH{piece[3]}} & intcpt[3]) | 
        ({`M1_LENGTH{piece[4]}} & intcpt[4]) | 
        ({`M1_LENGTH{piece[5]}} & intcpt[5]) ; 
/*
    wire seg_1; 
    wire seg_2; 
    wire seg_3; 
    wire seg_4; 

    assign seg_1 = (piece[`SEG1_NUM - 1 : 0] || 0); 
    assign seg_2 = (piece[`SEG2_NUM + `SEG1_NUM - 1 : `SEG1_NUM] || 0); 
    assign seg_3 = (piece[`SEG3_NUM + `SEG2_NUM + `SEG1_NUM - 1 : `SEG2_NUM + `SEG1_NUM] || 0); 
    assign seg_4 = (piece[`PIECE_NUM - 1 : `PIECE_NUM - `SEG4_NUM] || 0); 
*/  
    // shift for adder 2
    wire [`M1_LENGTH - 1 : 0] adder; 

    assign adder = 
        ( {`M1_LENGTH{piece[0]}} & ((m1) + (m1>>2)) ) | 
        ( {`M1_LENGTH{piece[1]}} & ((m1) + (m1>>2) + (m1>>5)) ) | 
        ( {`M1_LENGTH{piece[2]}} & ((m1)) ) | 
        ( {`M1_LENGTH{piece[3]}} & ((m1) + (m1>>5) + (m1>>6)) ) | 
        ( {`M1_LENGTH{piece[4]}} & ((m1) - (m1>>4) - (m1>>5) - (m1>>6)) ) | 
        ( {`M1_LENGTH{piece[5]}} & ((m1) - (m1>>2) + (m1>>6)) ); 

    // add adder 2
    wire [`M1_LENGTH - 1 : 0] m2_r; 
     
    assign m2_r = (adder + const); 
    assign m2 = m2_r[`M1_LENGTH - 1 : 1]; 

endmodule
