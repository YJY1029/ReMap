`timescale 1ns / 1ns

`include "defines.v"

module remap( 
    input wire [`M1_LENGTH - 1 : 0] m1, 

    output wire [`M2_LENGTH - 1 : 0] m2
); 

    // generate nodes and constants
    wire [`M1_LENGTH - 1 : 0] node [`NODE_NUM - 1 : 0]; 
    wire [`M1_LENGTH - 1 : 0] intcpt [`PIECE_NUM - 1 : 0]; 

    //generated by ../Checked/makeverilog.m 

    assign node[0] = 28'h0000000; 
    assign intcpt[0] = 28'h0000000; 

    assign node[1] = 28'h00CCCCC; 
    assign intcpt[1] = 28'h0020005; 

    assign node[2] = 28'h0199999; 
    assign intcpt[2] = 28'h003FFFC; 

    assign node[3] = 28'h0266666; 
    assign intcpt[3] = 28'h0060001; 

    assign node[4] = 28'h0333333; 
    assign intcpt[4] = 28'h007FFF9; 

    assign node[5] = 28'h0400000; 
    assign intcpt[5] = 28'h009FFFE; 

    assign node[6] = 28'h04CCCCC; 
    assign intcpt[6] = 28'h00C0003; 

    assign node[7] = 28'h0599999; 
    assign intcpt[7] = 28'h00DFFFA; 

    assign node[8] = 28'h0666666; 
    assign intcpt[8] = 28'h0100000; 

    assign node[9] = 28'h0733333; 
    assign intcpt[9] = 28'h0120005; 

    assign node[10] = 28'h0800000; 
    assign intcpt[10] = 28'h013FFFC; 

    assign node[11] = 28'h08CCCCC; 
    assign intcpt[11] = 28'h0160001; 

    assign node[12] = 28'h0999999; 
    assign intcpt[12] = 28'h017FFF9; 

    assign node[13] = 28'h0CCCCCC; 
    assign intcpt[13] = 28'h01B0000; 

    assign node[14] = 28'h1CCCCCC; 
    assign intcpt[14] = 28'h014FFFF; 

    assign node[15] = 28'h2000000; 
    assign intcpt[15] = 28'h092FFFA; 

    assign node[16] = 28'h2100000; 
    assign intcpt[16] = 28'h094FFFF; 

    assign node[17] = 28'h2200000; 
    assign intcpt[17] = 28'h0970004; 

    assign node[18] = 28'h2300000; 
    assign intcpt[18] = 28'h098FFFB; 

    assign node[19] = 28'h2400000; 
    assign intcpt[19] = 28'h09B0000; 

    assign node[20] = 28'h2500000; 
    assign intcpt[20] = 28'h09D0005; 

    assign node[21] = 28'h2600000; 
    assign intcpt[21] = 28'h09EFFFD; 

    assign node[22] = 28'h2700000; 
    assign intcpt[22] = 28'h0A10002; 

    assign node[23] = 28'h2800000; 
    assign intcpt[23] = 28'h0A2FFFA; 

    assign node[24] = 28'h2900000; 
    assign intcpt[24] = 28'h0A4FFFF; 

    assign node[25] = 28'h2A00000; 
    assign intcpt[25] = 28'h0A70004; 

    assign node[26] = 28'h2B00000; 
    assign intcpt[26] = 28'h0A8FFFB; 

    assign node[27] = 28'h2C00000; 
    assign intcpt[27] = 28'h0AB0000; 

    assign node[28] = 28'h3000000; 
    assign intcpt[28] = 28'h0ADFFFA; 

    assign node[29] = 28'h4000000; 
    assign intcpt[29] = 28'h12DFFFA; 

    assign node[30] = 28'h4124924; 
    assign intcpt[30] = 28'h1300000; 

    assign node[31] = 28'h4249249; 
    assign intcpt[31] = 28'h1320005; 

    assign node[32] = 28'h436DB6D; 
    assign intcpt[32] = 28'h133FFFC; 

    assign node[33] = 28'h4492492; 
    assign intcpt[33] = 28'h134FFFF; 

    assign node[34] = 28'h4924924; 
    assign intcpt[34] = 28'h138FFFB; 

    assign node[35] = 28'h6000000; 
    assign intcpt[35] = 28'h1F4FFFF; 

    assign node[36] = 28'h6155555; 
    assign intcpt[36] = 28'h1F70004; 

    assign node[37] = 28'h62AAAAA; 
    assign intcpt[37] = 28'h1F8FFFB; 

    assign node[38] = 28'h6400000; 
    assign intcpt[38] = 28'h1FB0000; 

    assign node[39] = 28'h6555555; 
    assign intcpt[39] = 28'h1FD0005; 

    assign node[40] = 28'h6AAAAAA; 
    assign intcpt[40] = 28'h2000000; 

    // compare 
    wire [`PIECE_NUM - 1 : 0] piece; 
    wire [`M1_LENGTH - 1 : 0] const; 

    genvar i; 
    generate 
        for (i = 0; i < 41; i = i + 1) begin 
            assign piece[i] = ((node[i] < m1) && (m1 <= node[i+1])); 
        end
    endgenerate 

    assign const = 
        ({`M1_LENGTH{piece[0]}} & intcpt[0]) | 
        ({`M1_LENGTH{piece[1]}} & intcpt[1]) | 
        ({`M1_LENGTH{piece[2]}} & intcpt[2]) | 
        ({`M1_LENGTH{piece[3]}} & intcpt[3]) | 
        ({`M1_LENGTH{piece[4]}} & intcpt[4]) | 
        ({`M1_LENGTH{piece[5]}} & intcpt[5]) | 
        ({`M1_LENGTH{piece[6]}} & intcpt[6]) | 
        ({`M1_LENGTH{piece[7]}} & intcpt[7]) | 
        ({`M1_LENGTH{piece[8]}} & intcpt[8]) | 
        ({`M1_LENGTH{piece[9]}} & intcpt[9]) | 
        ({`M1_LENGTH{piece[10]}} & intcpt[10]) | 
        ({`M1_LENGTH{piece[11]}} & intcpt[11]) | 
        ({`M1_LENGTH{piece[12]}} & intcpt[12]) | 
        ({`M1_LENGTH{piece[13]}} & intcpt[13]) | 
        ({`M1_LENGTH{piece[14]}} & intcpt[14]) | 
        ({`M1_LENGTH{piece[15]}} & intcpt[15]) | 
        ({`M1_LENGTH{piece[16]}} & intcpt[16]) | 
        ({`M1_LENGTH{piece[17]}} & intcpt[17]) | 
        ({`M1_LENGTH{piece[18]}} & intcpt[18]) | 
        ({`M1_LENGTH{piece[19]}} & intcpt[19]) | 
        ({`M1_LENGTH{piece[20]}} & intcpt[20]) | 
        ({`M1_LENGTH{piece[21]}} & intcpt[21]) | 
        ({`M1_LENGTH{piece[22]}} & intcpt[22]) | 
        ({`M1_LENGTH{piece[23]}} & intcpt[23]) | 
        ({`M1_LENGTH{piece[24]}} & intcpt[24]) | 
        ({`M1_LENGTH{piece[25]}} & intcpt[25]) | 
        ({`M1_LENGTH{piece[26]}} & intcpt[26]) | 
        ({`M1_LENGTH{piece[27]}} & intcpt[27]) | 
        ({`M1_LENGTH{piece[28]}} & intcpt[28]) | 
        ({`M1_LENGTH{piece[29]}} & intcpt[29]) | 
        ({`M1_LENGTH{piece[30]}} & intcpt[30]) | 
        ({`M1_LENGTH{piece[31]}} & intcpt[31]) | 
        ({`M1_LENGTH{piece[32]}} & intcpt[32]) | 
        ({`M1_LENGTH{piece[33]}} & intcpt[33]) | 
        ({`M1_LENGTH{piece[34]}} & intcpt[34]) | 
        ({`M1_LENGTH{piece[35]}} & intcpt[35]) | 
        ({`M1_LENGTH{piece[36]}} & intcpt[36]) | 
        ({`M1_LENGTH{piece[37]}} & intcpt[37]) | 
        ({`M1_LENGTH{piece[38]}} & intcpt[38]) | 
        ({`M1_LENGTH{piece[39]}} & intcpt[39]) | 
        ({`M1_LENGTH{piece[40]}} & intcpt[40]) | 
        ({`M1_LENGTH{piece[41]}} & intcpt[41]); 

    wire seg_1; 
    wire seg_2; 
    wire seg_3; 
    wire seg_4; 

    assign seg_1 = (piece[`SEG1_NUM - 1 : 0] || 0); 
    assign seg_2 = (piece[`SEG2_NUM + `SEG1_NUM - 1 : `SEG1_NUM] || 0); 
    assign seg_3 = (piece[`SEG3_NUM + `SEG2_NUM + `SEG1_NUM - 1 : `SEG2_NUM + `SEG1_NUM] || 0); 
    assign seg_4 = (piece[`PIECE_NUM - 1 : `PIECE_NUM - `SEG4_NUM] || 0); 
    
    // shift for adder 2
    wire [`M1_LENGTH - 1 : 0] adder; 

    assign adder = 
        ({`M1_LENGTH{seg_1}} & (m1 << 2)) | 
        ({`M1_LENGTH{seg_2}} & 0) | 
        ({`M1_LENGTH{seg_3}} & -(m1 >> 3)) | 
        ({`M1_LENGTH{seg_4}} & -(m1 >> 2)); // if wrong, it's subtraction

    // add adder 2
    wire [`M1_LENGTH - 1 : 0] m2_r; 
     
    assign m2_r = (m1 + adder + const); 
    assign m2 = m2_r[`M1_LENGTH - 1 : 1]; 

endmodule
